{"ast":null,"code":"var _jsxFileName = \"/home/taito/dev/task-app/client/src/components/TaskItem.tsx\",\n  _s = $RefreshSig$();\nimport { MdDelete } from 'react-icons/md';\nimport { useState, useRef, useEffect } from 'react';\nimport { MdEdit } from 'react-icons/md';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TaskItem({\n  id,\n  title,\n  completed,\n  toggleCompleted,\n  deleteTask,\n  editTask\n}) {\n  _s();\n  const [editing, setEditing] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current.focus();\n  }, []);\n  let viewMode = {};\n  let editMode = {};\n  let completedStyle = {};\n  editing ? viewMode.display = 'none' : editMode.display = 'none';\n  completed ? completedStyle.textDecoration = 'line-through' : completedStyle.textDecoration = 'none';\n  function toggleEditing() {\n    ref.current.focus();\n    if (editing) {\n      setEditing(false);\n    } else {\n      setEditing(true);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task\",\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"task__checkbox\",\n        type: \"checkbox\",\n        checked: completed,\n        onChange: e => toggleCompleted(id, e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task__title  task__title--view\",\n        style: viewMode,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          ref: ref,\n          style: completedStyle,\n          onClick: () => toggleEditing(),\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task__title task__title--edit\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: ref,\n          style: editMode,\n          type: \"text\",\n          value: title,\n          onChange: e => editTask(id, e.target.value),\n          onKeyUp: e => {\n            if (e.key === 'Enter') toggleEditing();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task__buttons\",\n        children: [/*#__PURE__*/_jsxDEV(MdEdit, {\n          className: \"task__button task__button--edit\",\n          onClick: () => toggleEditing()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MdDelete, {\n          className: \"task__button task__button--delete\",\n          onClick: () => deleteTask(id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskItem, \"iNwxsMxUWEd743eiN56TgxFgv4c=\");\n_c = TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["MdDelete","useState","useRef","useEffect","MdEdit","jsxDEV","_jsxDEV","TaskItem","id","title","completed","toggleCompleted","deleteTask","editTask","_s","editing","setEditing","ref","current","focus","viewMode","editMode","completedStyle","display","textDecoration","toggleEditing","className","children","type","checked","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","style","onClick","value","onKeyUp","key","_c","$RefreshReg$"],"sources":["/home/taito/dev/task-app/client/src/components/TaskItem.tsx"],"sourcesContent":["import { MdDelete } from 'react-icons/md';\nimport CSS from 'csstype';\nimport { useState, useRef, useEffect } from 'react';\nimport { MdEdit } from 'react-icons/md';\n\ninterface Props {\n    id: string;\n    title: string;\n    completed: boolean;\n    toggleCompleted: (id: string, completed: boolean) => void;\n    deleteTask: (id: string) => void;\n    editTask: (id: string, newTitle: string) => void;\n}\n\nexport function TaskItem({ id, title, completed, toggleCompleted, deleteTask, editTask }: Props) {\n\n    const [editing, setEditing] = useState(false);\n    const ref = useRef(null);\n    \n    useEffect(() => {\n        ref.current.focus();\n    }, []);\n    \n    let viewMode: CSS.Properties = {};\n    let editMode: CSS.Properties = {};\n    let completedStyle: CSS.Properties = {};\n\n    (editing) ? viewMode.display = 'none' : editMode.display = 'none';\n    (completed) ? completedStyle.textDecoration = 'line-through' : completedStyle.textDecoration = 'none';\n\n    function toggleEditing() {\n        ref.current.focus();\n        if (editing) {\n            setEditing(false);\n        } else {\n            setEditing(true);\n        }\n    }\n\n    return (\n        <div className=\"task\">\n            <li>\n                <input\n                    className=\"task__checkbox\"\n                    type=\"checkbox\"\n                    checked={completed}\n                    onChange={(e) => toggleCompleted(id, e.target.checked)} />\n                <div className=\"task__title  task__title--view\" style={viewMode}>\n                    <span ref={ref} style={completedStyle} onClick={() => toggleEditing()}>{title}</span>\n                </div>\n                <div className=\"task__title task__title--edit\">\n                    <input\n                        ref={ref}\n                        style={editMode}\n                        type=\"text\"\n                        value={title}\n                        onChange={(e) => editTask(id, e.target.value)}\n                        onKeyUp={(e) => { if (e.key === 'Enter') toggleEditing() }} />\n                </div>\n                <div className=\"task__buttons\">\n                    <MdEdit className=\"task__button task__button--edit\" onClick={() => toggleEditing()} />\n                    <MdDelete className=\"task__button task__button--delete\" onClick={() => deleteTask(id)} />\n                </div>\n            </li>\n        </div>\n\n    );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}